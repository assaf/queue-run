{"version":3,"sources":["/Users/assaf/Projects/queue.run/packages/services/lib/deploy/deployProject.ts"],"sourcesContent":["import Lambda from \"@aws-sdk/client-lambda\";\nimport { buildProject } from \"@queue-run/builder\";\nimport ms from \"ms\";\nimport invariant from \"tiny-invariant\";\nimport { addTriggers, removeTriggers } from \"./eventSource\";\nimport { createQueues, deleteOldQueues } from \"./prepareQueues\";\nimport { Deploy } from \"./state\";\nimport updateAlias from \"./updateAlias\";\nimport uploadLambda from \"./uploadLambda\";\nimport withBuildDirs from \"./withBuildDirs\";\n\nexport default async function deployProject({\n  archive,\n  deploy,\n  signal,\n}: {\n  archive: Buffer;\n  deploy: Deploy;\n  signal: AbortSignal;\n}) {\n  const start = Date.now();\n  console.info(\"üêá Starting deploy %s\", deploy.id);\n\n  const { lambdaRuntime, queues, zip } = await withBuildDirs(\n    { archive, signal },\n    async ({ sourceDir, targetDir }) =>\n      await buildProject({\n        full: true,\n        signal,\n        sourceDir,\n        targetDir,\n      })\n  );\n  if (signal.aborted) throw new Error();\n\n  const lambdaName = `backend-${deploy.projectId}`;\n  const queuePrefix = `${deploy.projectId}-${deploy.branchId}__`;\n  const lambdaAlias = `${lambdaName}-${deploy.branchId}`;\n  const lambdaTimeout = 30;\n  const queueTimeout = lambdaTimeout * 6;\n\n  const versionARN = await prepareLambda({\n    envVars: {\n      NODE_ENV: \"production\",\n      QUEUE_RUN_PROJECT: deploy.projectId,\n      QUEUE_RUN_BRANCH: deploy.branchId,\n    },\n    lambdaName,\n    lambdaRuntime,\n    zip,\n  });\n  if (signal.aborted) throw new Error();\n\n  // From this point on, we hope to complete successfully and so ignore abort signal\n  await switchOver({\n    lambdaAlias,\n    queues,\n    queuePrefix,\n    versionARN,\n    queueTimeout,\n  });\n\n  console.info(\"üêá Done in %s\", ms(Date.now() - start));\n}\n\nasync function prepareLambda({\n  envVars,\n  lambdaName,\n  lambdaRuntime,\n  zip,\n}: {\n  envVars: Record<string, string>;\n  lambdaName: string;\n  lambdaRuntime: Lambda.Runtime;\n  zip: Uint8Array;\n}) {\n  const lambdaTimeout = 30;\n  // Upload new Lambda function and publish a new version.\n  // This doesn't make any difference yet: event sources are tied to an alias,\n  // and the alias points to an earlier version (or no version on first deploy).\n  const versionARN = await uploadLambda({\n    envVars,\n    lambdaName,\n    lambdaTimeout,\n    lambdaRuntime,\n    zip,\n  });\n  // goose-bump:50 => goose-bump:goose-bump-main\n  const version = versionARN.match(/(\\d)+$/)?.[1];\n  invariant(version);\n  return versionARN;\n}\n\nasync function switchOver({\n  lambdaAlias,\n  queues,\n  queuePrefix,\n  versionARN,\n  queueTimeout,\n}: {\n  lambdaAlias: string;\n  queuePrefix: string;\n  queues: string[];\n  versionARN: string;\n  queueTimeout: number;\n}) {\n  const aliasARN = versionARN.replace(/(\\d+)$/, lambdaAlias);\n\n  // Create queues that new version expects, and remove triggers for event\n  // sources that new version does not understand.\n  const queueARNs = await createQueues({\n    queues,\n    prefix: queuePrefix,\n    queueTimeout,\n  });\n\n  await removeTriggers({ lambdaARN: aliasARN, sourceARNs: queueARNs });\n\n  // Update alias to point to new version.\n  //\n  // The alias includes the branch name, so if you parallel deploy in two\n  // branches, you would have two aliases pointing to two different published\n  // versions:\n  //\n  //    {projectId}-{branch} => {projectId}:{version}\n  await updateAlias({ aliasARN, versionARN });\n\n  // Add triggers for queues that new version can handle.  We do that for the\n  // alias, so we only need to add new triggers, existing triggers carry over:\n  //\n  //   trigger {projectId}-{branch}__{queueName} => {projectId}-{branch}\n  await addTriggers({ lambdaARN: aliasARN, sourceARNs: queueARNs });\n  console.info(\n    \"Œª: Using %s version %s\",\n    aliasARN.split(\":\").slice(-1),\n    versionARN.split(\":\").slice(-1)\n  );\n\n  // Delete any queues that are no longer needed.\n  await deleteOldQueues({ prefix: queuePrefix, queueARNs });\n}\n"],"names":["deployProject","archive","deploy","signal","start","Date","now","console","info","id","lambdaRuntime","queues","zip","sourceDir","targetDir","full","aborted","Error","lambdaName","projectId","queuePrefix","branchId","lambdaAlias","lambdaTimeout","queueTimeout","versionARN","prepareLambda","envVars","NODE_ENV","QUEUE_RUN_PROJECT","QUEUE_RUN_BRANCH","switchOver","version","match","aliasARN","replace","queueARNs","prefix","lambdaARN","sourceARNs","split","slice"],"mappings":";;;;kBAW8BA,aAAa;AAVd,GAAoB,CAApB,QAAoB;AAClC,GAAI,CAAJ,GAAI;AACG,GAAgB,CAAhB,cAAgB;AACM,GAAe,CAAf,YAAe;AACb,GAAiB,CAAjB,cAAiB;AAEvC,GAAe,CAAf,YAAe;AACd,GAAgB,CAAhB,aAAgB;AACf,GAAiB,CAAjB,cAAiB;;;;;;eAEbA,aAAa,CAAC,CAAC,CAC3CC,OAAO,GACPC,MAAM,GACNC,MAAM,EAKR,CAAC,EAAE,CAAC;IACF,KAAK,CAACC,KAAK,GAAGC,IAAI,CAACC,GAAG;IACtBC,OAAO,CAACC,IAAI,CAAC,CAAsB,0BAAKN,MAAM,CAACO,EAAE;IAE9C,KAAE,CAAC,CAAC,CAACC,aAAa,GAAEC,MAAM,GAAEC,GAAG,EAAC,CAAC,GAAG,KAAK,KAdpB,cAAiB,UAevC,CAAC;QAACX,OAAO;QAAEE,MAAM;IAAC,CAAC,SACZ,CAAC,CAACU,SAAS,GAAEC,SAAS,EAAC,CAAC,GAC7B,KAAK,KAzBkB,QAAoB,eAyBxB,CAAC;YAClBC,IAAI,EAAE,IAAI;YACVZ,MAAM;YACNU,SAAS;YACTC,SAAS;QACX,CAAC;;IAEL,EAAE,EAAEX,MAAM,CAACa,OAAO,EAAE,KAAK,CAAC,GAAG,CAACC,KAAK;IAEnC,KAAK,CAACC,UAAU,IAAI,QAAQ,EAAEhB,MAAM,CAACiB,SAAS;IAC9C,KAAK,CAACC,WAAW,MAAMlB,MAAM,CAACiB,SAAS,CAAC,CAAC,EAAEjB,MAAM,CAACmB,QAAQ,CAAC,EAAE;IAC7D,KAAK,CAACC,WAAW,MAAMJ,UAAU,CAAC,CAAC,EAAEhB,MAAM,CAACmB,QAAQ;IACpD,KAAK,CAACE,aAAa,GAAG,EAAE;IACxB,KAAK,CAACC,YAAY,GAAGD,aAAa,GAAG,CAAC;IAEtC,KAAK,CAACE,UAAU,GAAG,KAAK,CAACC,aAAa,CAAC,CAAC;QACtCC,OAAO,EAAE,CAAC;YACRC,QAAQ,EAAE,CAAY;YACtBC,iBAAiB,EAAE3B,MAAM,CAACiB,SAAS;YACnCW,gBAAgB,EAAE5B,MAAM,CAACmB,QAAQ;QACnC,CAAC;QACDH,UAAU;QACVR,aAAa;QACbE,GAAG;IACL,CAAC;IACD,EAAE,EAAET,MAAM,CAACa,OAAO,EAAE,KAAK,CAAC,GAAG,CAACC,KAAK;IAEnC,EAAkF,AAAlF,gFAAkF;IAClF,KAAK,CAACc,UAAU,CAAC,CAAC;QAChBT,WAAW;QACXX,MAAM;QACNS,WAAW;QACXK,UAAU;QACVD,YAAY;IACd,CAAC;IAEDjB,OAAO,CAACC,IAAI,CAAC,CAAc,sBA5Dd,GAAI,UA4DkBH,IAAI,CAACC,GAAG,KAAKF,KAAK;AACpD,CAAF;eAEcsB,aAAa,CAAC,CAAC,CAC5BC,OAAO,GACPT,UAAU,GACVR,aAAa,GACbE,GAAG,EAML,CAAC,EAAE,CAAC;QAaca,GAA0B;IAZ1C,KAAK,CAACF,aAAa,GAAG,EAAE;IACxB,EAAwD,AAAxD,sDAAwD;IACxD,EAA4E,AAA5E,0EAA4E;IAC5E,EAA8E,AAA9E,4EAA8E;IAC9E,KAAK,CAACE,UAAU,GAAG,KAAK,KAxED,aAAgB,UAwED,CAAC;QACrCE,OAAO;QACPT,UAAU;QACVK,aAAa;QACbb,aAAa;QACbE,GAAG;IACL,CAAC;IACD,EAA8C,AAA9C,4CAA8C;IAC9C,KAAK,CAACoB,OAAO,IAAGP,GAA0B,GAA1BA,UAAU,CAACQ,KAAK,wBAAhBR,GAA0B,KAA1BA,IAAI,CAAJA,CAA+B,GAA/BA,IAAI,CAAJA,CAA+B,GAA/BA,GAA0B,CAAG,CAAC;QArF1B,cAAgB,UAsF1BO,OAAO;IACjB,MAAM,CAACP,UAAU;AACnB,CAAC;eAEcM,UAAU,CAAC,CAAC,CACzBT,WAAW,GACXX,MAAM,GACNS,WAAW,GACXK,UAAU,GACVD,YAAY,EAOd,CAAC,EAAE,CAAC;IACF,KAAK,CAACU,QAAQ,GAAGT,UAAU,CAACU,OAAO,WAAWb,WAAW;IAEzD,EAAwE,AAAxE,sEAAwE;IACxE,EAAgD,AAAhD,8CAAgD;IAChD,KAAK,CAACc,SAAS,GAAG,KAAK,KAzGqB,cAAiB,eAyGxB,CAAC;QACpCzB,MAAM;QACN0B,MAAM,EAAEjB,WAAW;QACnBI,YAAY;IACd,CAAC;IAED,KAAK,KAhHqC,YAAe,iBAgHpC,CAAC;QAACc,SAAS,EAAEJ,QAAQ;QAAEK,UAAU,EAAEH,SAAS;IAAC,CAAC;IAEnE,EAAwC,AAAxC,sCAAwC;IACxC,EAAE;IACF,EAAuE,AAAvE,qEAAuE;IACvE,EAA2E,AAA3E,yEAA2E;IAC3E,EAAY,AAAZ,UAAY;IACZ,EAAE;IACF,EAAmD,AAAnD,iDAAmD;IACnD,KAAK,KAtHiB,YAAe,UAsHnB,CAAC;QAACF,QAAQ;QAAET,UAAU;IAAC,CAAC;IAE1C,EAA2E,AAA3E,yEAA2E;IAC3E,EAA4E,AAA5E,0EAA4E;IAC5E,EAAE;IACF,EAAsE,AAAtE,oEAAsE;IACtE,KAAK,KA/HqC,YAAe,cA+HvC,CAAC;QAACa,SAAS,EAAEJ,QAAQ;QAAEK,UAAU,EAAEH,SAAS;IAAC,CAAC;IAChE7B,OAAO,CAACC,IAAI,CACV,CAAwB,0BACxB0B,QAAQ,CAACM,KAAK,CAAC,CAAG,IAAEC,KAAK,EAAE,CAAC,GAC5BhB,UAAU,CAACe,KAAK,CAAC,CAAG,IAAEC,KAAK,EAAE,CAAC;IAGhC,EAA+C,AAA/C,6CAA+C;IAC/C,KAAK,KAtIuC,cAAiB,kBAsIvC,CAAC;QAACJ,MAAM,EAAEjB,WAAW;QAAEgB,SAAS;IAAC,CAAC;AAC1D,CAAC"}