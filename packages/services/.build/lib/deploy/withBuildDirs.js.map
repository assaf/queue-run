{"version":3,"sources":["/Users/assaf/Projects/queue.run/packages/services/lib/deploy/withBuildDirs.ts"],"sourcesContent":["import fs from \"fs/promises\";\nimport JSZip from \"jszip\";\nimport path from \"path\";\n\n// Explode the zip into a temporary directory (sourceDir), create a second\n// temporary directory (targetDir), and run the build function.\n//\n// Temporary directories are destroyed when this build function completes.\n//\n// Note that Lambda gives us about 512MB of storage in /tmp: an archive can\n// eat up a lot more than that.\nexport default async function withBuildDirs<T>(\n  { archive, signal }: { archive: Buffer; signal: AbortSignal },\n  buildFn: ({\n    sourceDir,\n    targetDir,\n  }: {\n    sourceDir: string;\n    targetDir: string;\n  }) => Promise<T>\n): Promise<T> {\n  const sourceDir = await fs.mkdtemp(\"/tmp/source\");\n  const targetDir = await fs.mkdtemp(\"/tmp/target\");\n  try {\n    await explodeZip(archive, sourceDir);\n    if (signal.aborted) throw new Error();\n\n    return await buildFn({ sourceDir, targetDir });\n  } finally {\n    await Promise.all([\n      fs.rm(sourceDir, { force: true, recursive: true }),\n      fs.rm(targetDir, { force: true, recursive: true }),\n    ]);\n  }\n}\n\nasync function explodeZip(archive: Buffer, targetDir: string) {\n  const zip = new JSZip();\n  await zip.loadAsync(archive);\n  await Promise.all(\n    Object.entries(zip.files).map(async ([filename, file]) => {\n      const realpath = path.resolve(targetDir, filename);\n      if (file.dir) await fs.mkdir(realpath, { recursive: true });\n      else {\n        await fs.mkdir(path.dirname(realpath), { recursive: true });\n        await fs.writeFile(realpath, await file.async(\"nodebuffer\"));\n      }\n    })\n  );\n}\n"],"names":["withBuildDirs","archive","signal","buildFn","sourceDir","mkdtemp","targetDir","explodeZip","aborted","Error","Promise","all","rm","force","recursive","zip","loadAsync","Object","entries","files","map","filename","file","realpath","resolve","dir","mkdir","dirname","writeFile","async"],"mappings":";;;;kBAW8BA,aAAa;AAX5B,GAAa,CAAb,SAAa;AACV,GAAO,CAAP,MAAO;AACR,GAAM,CAAN,KAAM;;;;;;eASOA,aAAa,CACzC,CAAC,CAACC,OAAO,GAAEC,MAAM,EAA2C,CAAC,EAC7DC,OAMgB,EACJ,CAAC;IACb,KAAK,CAACC,SAAS,GAAG,KAAK,CArBV,SAAa,SAqBCC,OAAO,CAAC,CAAa;IAChD,KAAK,CAACC,SAAS,GAAG,KAAK,CAtBV,SAAa,SAsBCD,OAAO,CAAC,CAAa;IAChD,GAAG,CAAC,CAAC;QACH,KAAK,CAACE,UAAU,CAACN,OAAO,EAAEG,SAAS;QACnC,EAAE,EAAEF,MAAM,CAACM,OAAO,EAAE,KAAK,CAAC,GAAG,CAACC,KAAK;QAEnC,MAAM,CAAC,KAAK,CAACN,OAAO,CAAC,CAAC;YAACC,SAAS;YAAEE,SAAS;QAAC,CAAC;IAC/C,CAAC,QAAS,CAAC;QACT,KAAK,CAACI,OAAO,CAACC,GAAG,CAAC,CAAC;YA7BR,SAAa,SA8BnBC,EAAE,CAACR,SAAS,EAAE,CAAC;gBAACS,KAAK,EAAE,IAAI;gBAAEC,SAAS,EAAE,IAAI;YAAC,CAAC;YA9BxC,SAAa,SA+BnBF,EAAE,CAACN,SAAS,EAAE,CAAC;gBAACO,KAAK,EAAE,IAAI;gBAAEC,SAAS,EAAE,IAAI;YAAC,CAAC;QACnD,CAAC;IACH,CAAC;AACH,CAAC;eAEcP,UAAU,CAACN,OAAe,EAAEK,SAAiB,EAAE,CAAC;IAC7D,KAAK,CAACS,GAAG,GAAG,GAAG,CApCC,MAAO;IAqCvB,KAAK,CAACA,GAAG,CAACC,SAAS,CAACf,OAAO;IAC3B,KAAK,CAACS,OAAO,CAACC,GAAG,CACfM,MAAM,CAACC,OAAO,CAACH,GAAG,CAACI,KAAK,EAAEC,GAAG,SAASC,QAAQ,EAAEC,IAAI,IAAM,CAAC;QACzD,KAAK,CAACC,QAAQ,GAvCH,KAAM,SAuCKC,OAAO,CAAClB,SAAS,EAAEe,QAAQ;QACjD,EAAE,EAAEC,IAAI,CAACG,GAAG,EAAE,KAAK,CA1CV,SAAa,SA0CCC,KAAK,CAACH,QAAQ,EAAE,CAAC;YAACT,SAAS,EAAE,IAAI;QAAC,CAAC;aACrD,CAAC;YACJ,KAAK,CA5CE,SAAa,SA4CXY,KAAK,CA1CL,KAAM,SA0CKC,OAAO,CAACJ,QAAQ,GAAG,CAAC;gBAACT,SAAS,EAAE,IAAI;YAAC,CAAC;YAC1D,KAAK,CA7CE,SAAa,SA6CXc,SAAS,CAACL,QAAQ,EAAE,KAAK,CAACD,IAAI,CAACO,KAAK,CAAC,CAAY;QAC5D,CAAC;IACH,CAAC;AAEL,CAAC"}