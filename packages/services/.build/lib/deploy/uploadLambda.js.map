{"version":3,"sources":["/Users/assaf/Projects/queue.run/packages/services/lib/deploy/uploadLambda.ts"],"sourcesContent":["import { FunctionConfiguration, Lambda, Runtime } from \"@aws-sdk/client-lambda\";\nimport invariant from \"tiny-invariant\";\nimport { deleteLambdaRole, getLambdaRole } from \"./lambdaRole\";\n\nexport const handler = \"node_modules/@queue-run/runtime/dist/index.handler\";\n\n// Creates or updates Lambda function with latest configuration and code.\n// Publishes the new version and returns the published version ARN.\nexport default async function uploadLambda({\n  envVars,\n  lambdaName,\n  lambdaTimeout,\n  lambdaRuntime,\n  zip,\n}: {\n  envVars: Record<string, string>;\n  lambdaName: string;\n  lambdaTimeout: number;\n  lambdaRuntime: Runtime;\n  zip: Uint8Array;\n}): Promise<string> {\n  const lambda = new Lambda({});\n\n  const configuration = {\n    Environment: { Variables: aliasAWSEnvVars(envVars) },\n    FunctionName: lambdaName,\n    Handler: handler,\n    Role: await getLambdaRole({ lambdaName }),\n    Runtime: lambdaRuntime,\n    Timeout: lambdaTimeout,\n    TracingConfig: { Mode: \"Active\" },\n  };\n\n  const existing = await getFunction({ lambda, lambdaName });\n  if (existing) {\n    // Change configuration first, here we determine runtime, and only then\n    // load code and publish.\n    const updatedConfig = await lambda.updateFunctionConfiguration({\n      ...configuration,\n      RevisionId: existing.RevisionId,\n    });\n    invariant(updatedConfig.RevisionId);\n\n    const { RevisionId: updatedConfigRevisionId } = await waitForNewRevision({\n      lambda,\n      lambdaName,\n      revisionId: updatedConfig.RevisionId,\n    });\n\n    const updatedCode = await lambda.updateFunctionCode({\n      FunctionName: lambdaName,\n      Publish: true,\n      ZipFile: zip,\n      RevisionId: updatedConfigRevisionId,\n    });\n    // FunctionArn includes version number\n    invariant(updatedCode.FunctionArn && updatedCode.RevisionId);\n\n    console.info(\"λ: Updated function %s\", lambdaName);\n    return updatedCode.FunctionArn;\n  }\n\n  const newLambda = await lambda.createFunction({\n    ...configuration,\n    Code: { ZipFile: zip },\n    PackageType: \"Zip\",\n    Publish: true,\n  });\n  // FunctionArn does not include version number\n  const arn = `${newLambda.FunctionArn}:${newLambda.Version}`;\n  console.info(\n    \"λ: Created new function %s in %s\",\n    lambdaName,\n    await lambda.config.region()\n  );\n\n  return arn;\n}\n\nasync function getFunction({\n  lambda,\n  lambdaName,\n}: {\n  lambda: Lambda;\n  lambdaName: string;\n}): Promise<FunctionConfiguration | null> {\n  try {\n    const { Configuration: existing } = await lambda.getFunction({\n      FunctionName: lambdaName,\n    });\n    return existing ?? null;\n  } catch (error) {\n    if (error instanceof Error && error.name === \"ResourceNotFoundException\")\n      return null;\n    else throw error;\n  }\n}\n\nasync function waitForNewRevision({\n  lambda,\n  lambdaName,\n  revisionId,\n}: {\n  lambda: Lambda;\n  lambdaName: string;\n  revisionId: string;\n}): Promise<FunctionConfiguration> {\n  const { Configuration } = await lambda.getFunction({\n    FunctionName: lambdaName,\n  });\n  if (!Configuration?.RevisionId)\n    throw new Error(\"Could not get function configuration\");\n\n  if (Configuration.RevisionId === revisionId) {\n    await new Promise((resolve) => setTimeout(resolve, 500));\n    return await waitForNewRevision({ lambda, lambdaName, revisionId });\n  } else {\n    return Configuration;\n  }\n}\n\nfunction aliasAWSEnvVars(\n  envVars: Record<string, string>\n): Record<string, string> {\n  const aliasPrefix = \"ALIASED_FOR_CLIENT__\";\n  const aliased: Record<string, string> = {};\n  for (const [key, value] of Object.entries(envVars)) {\n    if (key.startsWith(\"AWS_\")) aliased[`${aliasPrefix}${key}`] = value;\n    else aliased[key] = value;\n  }\n  return aliased;\n}\n\nexport async function deleteLambda({ lambdaName }: { lambdaName: string }) {\n  const lambda = new Lambda({});\n  await lambda.deleteFunction({ FunctionName: lambdaName });\n  await deleteLambdaRole({ lambdaName });\n}\n"],"names":["uploadLambda","deleteLambda","handler","envVars","lambdaName","lambdaTimeout","lambdaRuntime","zip","lambda","configuration","Environment","Variables","aliasAWSEnvVars","FunctionName","Handler","Role","Runtime","Timeout","TracingConfig","Mode","existing","getFunction","updatedConfig","updateFunctionConfiguration","RevisionId","updatedConfigRevisionId","waitForNewRevision","revisionId","updatedCode","updateFunctionCode","Publish","ZipFile","FunctionArn","console","info","newLambda","createFunction","Code","PackageType","arn","Version","config","region","Configuration","error","Error","name","Promise","resolve","setTimeout","aliasPrefix","aliased","key","value","Object","entries","startsWith","deleteFunction"],"mappings":"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"}