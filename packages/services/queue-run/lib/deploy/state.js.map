{"version":3,"sources":["/Users/assaf/Projects/queue.run/packages/services/lib/deploy/state.ts"],"sourcesContent":["import { DynamoDB } from \"@aws-sdk/client-dynamodb\";\nimport { deleteS3Archive } from \"./storage\";\n\nexport declare type Deploy = {\n  branchId?: string;\n  // Timestamp when deploy was completed with any outcome (including if cancelled)\n  completedAt?: Date;\n  // Duration deploy was allowed to run, or if currently running\n  duration?: number;\n  id: string;\n  outcome?: DeployOutcome;\n  projectId: string;\n  queuedAt: Date;\n  startedAt?: Date;\n};\n\ndeclare type DeployOutcome = \"success\" | \"failed\" | \"cancelled\";\n\nconst dynamoDB = new DynamoDB({});\n\nexport async function getDeploy(deployId: string): Promise<Deploy | null> {\n  const { Items: items } = await dynamoDB.executeStatement({\n    Statement: \"SELECT * FROM deploys WHERE id = ?\",\n    Parameters: [{ S: deployId }],\n  });\n  const item = items[0];\n  if (!item) return null;\n\n  const startedAt = item.started_at?.N ? +item.started_at.N : null;\n  const completedAt = item.completed_at?.N ? +item.completed_at.N : null;\n  const duration =\n    completedAt && startedAt\n      ? completedAt - startedAt\n      : startedAt\n      ? Date.now() - startedAt\n      : null;\n\n  return {\n    branchId: item.branch_id?.S,\n    completedAt: completedAt ? new Date(completedAt) : undefined,\n    duration,\n    id: item.id.S,\n    outcome: item.outcome?.S as \"success\" | \"failed\" | \"cancelled\",\n    projectId: item.project_id.S,\n    queuedAt: new Date(Number(item.created_at.N)),\n    startedAt: startedAt ? new Date(startedAt) : undefined,\n  };\n}\n\n// User makes one deploy, then a second, which gets queued waiting for the first\n// deploy to complete. Then they make a third deploy, at which point we might as well\n// cancel the second deploy, if it hasn't already started.\nexport async function cancelEarlierDeploys(deploy: Deploy) {\n  const { Items: deploys } = await dynamoDB.executeStatement({\n    Statement:\n      \"UPDATE deploys SET completed_at = ?, outcome = ?  WHERE deploy_id != ? AND branch_id = ? AND project_id = ? AND started_at IS NULL\",\n    Parameters: [\n      { N: String(Date.now()) },\n      { S: \"cancelled\" },\n      { S: deploy.id },\n      { S: deploy.branchId },\n      { S: deploy.projectId },\n    ],\n  });\n  await Promise.all(\n    deploys.map(async (item) => await deleteS3Archive(item.id.S))\n  );\n}\n\n// Count how many deploys are currently running for this project. We can\n// throttle by number of concurrent deploys.\nexport async function countActiveDeploys(projectId: string) {\n  const { Items: active } = await dynamoDB.executeStatement({\n    Statement:\n      \"SELECT * FROM deploys WHERE project_id = ? AND started_at IS NOT NULL AND completed_at IS NULL\",\n    Parameters: [{ S: projectId }],\n  });\n  return active.length;\n}\n\nexport async function markDeployStarted(deployId: string) {\n  await dynamoDB.executeStatement({\n    Statement: \"UPDATE deploys SET started_at = ? WHERE id = ?\",\n    Parameters: [{ N: String(Date.now) }, { S: deployId }],\n  });\n}\n\nexport async function markDeployCompleted(\n  deployId: string,\n  status: DeployOutcome\n) {\n  await dynamoDB.executeStatement({\n    Statement: \"UPDATE deploys SET completed_at = ?, status = ? WHERE id = ?\",\n    Parameters: [{ N: String(Date.now()) }, { S: status }, { S: deployId }],\n  });\n  await deleteS3Archive(deployId);\n}\n\nexport async function getNextWaitingDeploy(deploy: Deploy) {\n  const { Items: waiting } = await dynamoDB.executeStatement({\n    Statement:\n      \"SELECT * FROM deploys WHERE branch_id = ? AND project_id = ? AND started_at IS NULL AND completed_at IS NULL ORDER BY created_at ASC\",\n    Parameters: [{ S: deploy.branchId }, { S: deploy.projectId }],\n  });\n  return waiting[0]?.id.S;\n}\n"],"names":["getDeploy","cancelEarlierDeploys","countActiveDeploys","markDeployStarted","markDeployCompleted","getNextWaitingDeploy","dynamoDB","deployId","item","Items","items","executeStatement","Statement","Parameters","S","startedAt","started_at","N","completedAt","completed_at","duration","Date","now","branchId","branch_id","undefined","id","outcome","projectId","project_id","queuedAt","Number","created_at","deploy","deploys","String","Promise","all","map","active","length","status","waiting"],"mappings":"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"}